image: python:3.10

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHON_FILES: noiseTool/*

cache:
  key:
    prefix: ${CI_JOB_NAME}
    files:
      - poetry.lock
      - .gitlab-ci.yml
  paths:
    - .venv
    - .cache/pip
    - venv/
  when: on_success

stages:
  - linter
  - test
  - deploy
  - build
  - evaluate
  - evaluate all

before_script:
  - pip install poetry
  - poetry config virtualenvs.in-project true
  - poetry install

Linter:
  stage: linter
  script:
    - poetry run flake8 --version
    - echo $PYTHON_FILES
    - poetry run flake8 --ignore=E501 --format junit-xml $PYTHON_FILES > linter.xml
  artifacts:
    when: always
    reports:
      junit: linter.xml

Unit Tests:
  stage: test
  script:
    - poetry run coverage run -m pytest -v --junitxml=report.xml
    - poetry run coverage report -m
    - poetry run coverage xml -o coverage/cobertura-coverage.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

Package Registry:
  stage: deploy
  needs: [Unit Tests]
  script:
    - poetry version patch
    - git config user.email "bodensee@mytum.de"
    - git config user.name "GitLab Pipeline"
    - git config remote.gitlab_origin.url >&- || git remote add gitlab_origin https://oauth2:$ACCESS_TOKEN@gitlab.lrz.de/robust-devops/students/noise-project-bodensee.git
    - git remote set-url gitlab_origin https://oauth2:$ACCESS_TOKEN@gitlab.lrz.de/robust-devops/students/noise-project-bodensee.git
    - git add .
    - git commit -m "AUTO version increase"
    - git push gitlab_origin HEAD:main -o ci.skip

    - poetry build
    - poetry config repositories.gitlab https://gitlab.lrz.de/api/v4/projects/$CI_PROJECT_ID/packages/pypi
    - poetry config http-basic.gitlab gitlab-ci-token "$CI_JOB_TOKEN"
    - poetry publish --repository gitlab
  only:
    - main
  when: manual

pages:
  stage: deploy
  script:
    - poetry run pdoc --output-dir public ./noiseTool
  artifacts:
    paths:
    - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

Build wheel:
  stage: build
  script:
    - poetry install
    - poetry build -f wheel
    - mv dist/* dist/noise_tool-0.0.0-py3-none-any.whl
  artifacts:
    paths:
      - dist/

Base Image:
  image: docker:latest
  stage: evaluate
  services:
    - name: docker:dind # required for docker-in-docker
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
       tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
       tag=":$CI_COMMIT_REF_SLUG"
       echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
       echo "Pushing to $CI_REGISTRY_IMAGE/base_image${tag}"
      fi
    - docker pull "$CI_REGISTRY_IMAGE/base_image${tag}-$BASE_IMAGE_NAME_PREFIX" || true
    - docker build --build-arg noise="$NOISE_TYPE" --pull -t "$CI_REGISTRY_IMAGE/base_image${tag}-$BASE_IMAGE_NAME_PREFIX" -f evaluation_data/base_image/Dockerfile .
    - docker push "$CI_REGISTRY_IMAGE/base_image${tag}-$BASE_IMAGE_NAME_PREFIX"
    - echo "tag=$tag" > build.env
  dependencies:
    - Build wheel
  parallel:
    matrix:
      - NOISE_TYPE: noise-tool stress-ng add "^^cpu 0 ^l 5 ^^copy-file 5 ^^copy-file-bytes 2G"
        BASE_IMAGE_NAME_PREFIX: disk
      - NOISE_TYPE:  noise-tool stress-ng add "^^cpu 0 ^l 20"
        BASE_IMAGE_NAME_PREFIX: cpu
      - NOISE_TYPE: noise-tool stress-ng add "^vm 2 ^^vm-bytes 40"
        BASE_IMAGE_NAME_PREFIX: memory
      - NOISE_TYPE: noise-tool network-control --delay 200 --jitter 10
        BASE_IMAGE_NAME_PREFIX: network_delay
      - NOISE_TYPE: noise-tool network-control --loss 50
        BASE_IMAGE_NAME_PREFIX: packet_loss
      - NOISE_TYPE: noise-tool network-control --bandwidth 1000
        BASE_IMAGE_NAME_PREFIX: bandwidth
      - NOISE_TYPE: echo "BASELINE WITHOUT ANY NOISE"
        BASE_IMAGE_NAME_PREFIX: baseline
  artifacts:
    when: on_success
    expire_in: 1 day
    reports:
      dotenv: build.env

.Test Projects:
  image: docker:latest
  stage: evaluate
  services:
    - name: docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  artifacts:
    paths:
      - experiment.zip
  script:
    - docker build --pull --no-cache -t "$CI_REGISTRY_IMAGE/$PROJECT" evaluation_data/$PROJECT --build-arg tag="$tag-$BASE_IMAGE_NAME_PREFIX"
    - echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
    - id=$(docker create --cap-add=NET_ADMIN "$CI_REGISTRY_IMAGE/$PROJECT")
    - docker start -a $id
    - docker cp $id:/experiment-artifacts/experiment.zip $CI_PROJECT_DIR/experiment.zip


Test Projects:
  extends: .Test Projects
  needs:
    - job: Base Image
      artifacts: true
  parallel:
    matrix:
      - PROJECT: [shiki, docs]
        BASE_IMAGE_NAME_PREFIX: [baseline]

Test Projects big:
  stage: evaluate all
  extends: .Test Projects
  when: manual
  needs:
    - job: Base Image
      artifacts: true
  parallel:
    matrix:
      - PROJECT: [shiki, docs, material-ui, insomnia, remix, quill, theia, dev-roadmap, rocket-chat, floating-ui, playwright, lenster, ionic-framework]
        BASE_IMAGE_NAME_PREFIX: [disk, cpu, memory, network_delay, packet_loss, bandwidth, baseline]
